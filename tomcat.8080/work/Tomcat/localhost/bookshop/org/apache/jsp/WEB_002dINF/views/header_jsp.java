/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-10-12 17:53:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.Map;
import com.calm.webdb.entity.UsersEntity;
import java.util.List;

public final class header_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.calm.webdb.entity.UsersEntity");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"assets/css/bootstrap.css\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"assets/css/style.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"col-12 mb-3 bodyD\" style=\"height: 500px;\">\r\n");
      out.write("    <div class=\"row mt-1 mb-1\">\r\n");
      out.write("\r\n");
      out.write("        <div class=\"col-12 col-lg-10 offset-lg-1 align-self-start shodowC animEfect\"\r\n");
      out.write("             style=\"background-color: gray; opacity: 0.8;\">\r\n");
      out.write("            <div class=\"col-12\">\r\n");
      out.write("                <img src=\"assets/resources/infinity_logo2.svg\" style=\"width: 100px;\" />\r\n");
      out.write("                <span class=\"text-black fw-bold fs-1\">Infinity Bookshop</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"col-12\">\r\n");
      out.write("                    <span class=\"text-lg-start label1 text-black fs-3\">Welcome\r\n");
      out.write("\r\n");
      out.write("                        ");

                            session.setMaxInactiveInterval(1800); // Set session timeout to 30 minutes
                            List<UsersEntity> users = (List<UsersEntity>) session.getAttribute("u");
                            if (users != null) {
                                for (UsersEntity user : users) {
//                            Object user = session.getAttribute("u");
//                            if (user != null) {
//                                Map<String, String> data = (Map<String, String>) user;
                        
      out.write("\r\n");
      out.write("\r\n");
      out.write("                        ");
      out.print( user.getFname() );
      out.write("\r\n");
      out.write("\r\n");
      out.write("                        </span>\r\n");
      out.write("\r\n");
      out.write("                <span class=\"text-lg-start label2 text-info fs-3\" onclick=\"signout();\">Sign Out</span>\r\n");
      out.write("\r\n");
      out.write("                ");

                    }} else {
                
      out.write("\r\n");
      out.write("                <a href=\"#\" onclick=\"signInModal();\" class=\"fs-3 signA\">Sign In or Register</a>\r\n");
      out.write("                ");

                    }
                
      out.write("\r\n");
      out.write("\r\n");
      out.write("                <span class=\" text-black fs-3 fw-bolder\"> | Help and Contact</span>\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<div style=\"height: 100px;\"></div>\r\n");
      out.write("\r\n");
      out.write("<div\r\n");
      out.write("        class=\"col-lg-4 offset-lg-4 col-md-8 offset-md-2 col-10 offset-1 shadow rounded shodowC animEfect2\"\r\n");
      out.write("        style=\"background-color: gray; margin-top: 450px; height: 100px; position: absolute;\">\r\n");
      out.write("    <div class=\"row\">\r\n");
      out.write("\r\n");
      out.write("        <div class=\"col-12 align-self-end\" style=\"text-align: center;\">\r\n");
      out.write("\r\n");
      out.write("            <div class=\"row\">\r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-6 mt-3\">\r\n");
      out.write("                    <div class=\"col-2 offset-1\">\r\n");
      out.write("                        <button onclick=\"home();\" class=\"bg-transparent\" style=\"border: none;\"><label\r\n");
      out.write("                                class=\"form-label fs-3 bi bi-house-fill\"></label></button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-6 dropdown\">\r\n");
      out.write("                    <button class=\"btn btn-light dropdown-toggle bg-transparent position-relative mt-3\"\r\n");
      out.write("                            type=\"button\" id=\"dropdownMenuButton1\" data-bs-toggle=\"dropdown\"\r\n");
      out.write("                            aria-expanded=\"false\">\r\n");
      out.write("                        <label class=\"form-label fs-3 bi bi-person-circle\"></label>\r\n");
      out.write("                        Account\r\n");
      out.write("                        ");

                            if (users != null) {
                        
      out.write("\r\n");
      out.write("                        <span\r\n");
      out.write("                                class=\"position-absolute top-0 start-100 translate-middle badge border border-light rounded-circle bg-success p-2\"><span\r\n");
      out.write("                                class=\"visually-hidden\">unread messages</span></span>\r\n");
      out.write("                        ");

                        } else {
                        
      out.write("\r\n");
      out.write("                        <span\r\n");
      out.write("                                class=\"position-absolute top-0 start-100 translate-middle badge border border-light rounded-circle bg-danger p-2\"><span\r\n");
      out.write("                                class=\"visually-hidden\">unread messages</span></span>\r\n");
      out.write("                        ");

                            }
                        
      out.write("\r\n");
      out.write("                    </button>\r\n");
      out.write("                    <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\r\n");
      out.write("                        <li><a class=\"dropdown-item\" href=\"userProfile\">My Profile</a></li>\r\n");
      out.write("                        <li><a class=\"dropdown-item\" href=\"wachlist\">Watch List</a></li>\r\n");
      out.write("                        <li><a class=\"dropdown-item\" href=\"cart\">Cart</a></li>\r\n");
      out.write("                        <li><a class=\"dropdown-item\" href=\"purchasehistory.jsp\">Purchase History</a></li>\r\n");
      out.write("                        <li><a class=\"dropdown-item\" href=\"#\">Messages</a></li>\r\n");
      out.write("                        <li><a class=\"dropdown-item\" href=\"#\">Saved</a></li>\r\n");
      out.write("                    </ul>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-1 col-lg-3 ms-5 ms-lg-0 mt-1 cart-icon\"></div>\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script src=\"bootstrap.bundle.js\"></script>\r\n");
      out.write("<script src=\"script.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
