/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-10-09 04:20:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.*;
import java.util.*;

public final class createPayment_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // Retrieving the data from the POST request
    String token = request.getParameter("stripeToken");
    String contactName = request.getParameter("c_name");
    String tokenCardType = request.getParameter("stripeTokenType");
    String phone = request.getParameter("phone");
    String email = request.getParameter("stripeEmail");
    String address = request.getParameter("address");
    String amount = request.getParameter("amount");
    String desc = request.getParameter("product_name");

    System.out.println("hi m");
    System.out.println("address : "+address);
    System.out.println("token : "+token);

    String unitprice = request.getParameter("unitprice");
    String inputQty = request.getParameter("inputQty");
    String sid = request.getParameter("sid");
    String price = request.getParameter("price");

    // You can now use these variables to process the data as needed
    // For example, you can store them in a database, perform further processing, etc.

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Infinity | Checkout charge</title>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"icon\" href=\"assets/resources/infinity_logo2.svg\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<input type=\"hidden\" id=\"amount\" name=\"amount\" value=\"");
      out.print( amount );
      out.write("\">\r\n");
      out.write("<input type=\"hidden\" id=\"product_name\" name=\"product_name\" value=\"");
      out.print( desc );
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("<input type=\"hidden\" id=\"unitprice\" name=\"unitprice\" value=\"");
      out.print( unitprice );
      out.write("\">\r\n");
      out.write("<input type=\"hidden\" id=\"inputQty\" name=\"inputQty\" value=\"");
      out.print( inputQty );
      out.write("\">\r\n");
      out.write("<input type=\"hidden\" id=\"sid\" name=\"sid\" value=\"");
      out.print( sid );
      out.write("\">\r\n");
      out.write("<input type=\"hidden\" id=\"c_name\" name=\"c_name\" value=\"");
      out.print( contactName );
      out.write("\">\r\n");
      out.write("<input type=\"hidden\" id=\"address\" name=\"address\" value=\"");
      out.print( address );
      out.write("\">\r\n");
      out.write("<input type=\"hidden\" id=\"price\" name=\"price\" value=\"");
      out.print( price );
      out.write("\">\r\n");
      out.write("<input type=\"hidden\" id=\"token\" name=\"token\" value=\"");
      out.print( token );
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://js.stripe.com/v3/\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("    tokenCreater();\r\n");
      out.write("    function testFunction(){\r\n");
      out.write("        alert(\"im in..\");\r\n");
      out.write("    }\r\n");
      out.write("    // var stripe = Stripe('pk_test_51LauixIjAOH1QSloFfHFOFUN8xQ3Bc1XuB3ouIeZVK0dwXAnJZ3qpsnI7dDvsKufxmdhS0H7Y4SEM4sfpMASzh8x009HAJpvuC');\r\n");
      out.write("    // var elements = stripe.elements();\r\n");
      out.write("    // var card = elements.create('card');\r\n");
      out.write("    // card.mount('#card-element');\r\n");
      out.write("\r\n");
      out.write("    function tokenCreater(){\r\n");
      out.write("        console.log('Form submit event triggered');\r\n");
      out.write("        alert(\"im in token create\");\r\n");
      out.write("\r\n");
      out.write("        var amount = document.getElementById('amount').value;\r\n");
      out.write("\r\n");
      out.write("        var token1 = document.getElementById(\"token\").value;\r\n");
      out.write("        stripeTokenHandler(token1, amount);\r\n");
      out.write("\r\n");
      out.write("        // var priceInput = document.getElementById('price').value;\r\n");
      out.write("        // var priceInCents = parseInt(priceInput.replace(',', '')) * 100;\r\n");
      out.write("        // alert(\"im in token create2\");\r\n");
      out.write("        // stripe.createToken(card).then(function(result) {\r\n");
      out.write("        //     if (result.error) {\r\n");
      out.write("        //         alert(\"Error: \" + result.error.message);\r\n");
      out.write("        //     } else {\r\n");
      out.write("        //         stripeTokenHandler(result.token, amount);\r\n");
      out.write("        //     }\r\n");
      out.write("        // });\r\n");
      out.write("\r\n");
      out.write("        // stripe.createToken(card, { amount: priceInCents }).then(function(result) {\r\n");
      out.write("        //     alert(\"im in2\");\r\n");
      out.write("        //     if (result.error) {\r\n");
      out.write("        //         // var errorElement = document.getElementById('card-errors');\r\n");
      out.write("        //         // errorElement.textContent = result.error.message;\r\n");
      out.write("        //         alert(\"card-errors\");\r\n");
      out.write("        //     } else {\r\n");
      out.write("        //         stripeTokenHandler(result.token, priceInCents);\r\n");
      out.write("        //     }\r\n");
      out.write("        // });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function stripeTokenHandler(token, amount) {\r\n");
      out.write("        var inputQty = document.getElementById(\"inputQty\").value;\r\n");
      out.write("        var sid = document.getElementById(\"sid\").value;\r\n");
      out.write("        var c_name = document.getElementById(\"c_name\").value;\r\n");
      out.write("        var address = document.getElementById(\"address\").value;\r\n");
      out.write("        let tokenObject = {\r\n");
      out.write("            \"token\": token,\r\n");
      out.write("            \"amount\": amount,\r\n");
      out.write("            \"inputQty\": inputQty,\r\n");
      out.write("            \"sid\": sid,\r\n");
      out.write("            \"c_name\": c_name,\r\n");
      out.write("            \"address\": address,\r\n");
      out.write("        };\r\n");
      out.write("        var xhr = new XMLHttpRequest();\r\n");
      out.write("        xhr.open('POST', 'charge', true);\r\n");
      out.write("        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n");
      out.write("        xhr.onreadystatechange = function () {\r\n");
      out.write("            if (xhr.readyState === XMLHttpRequest.DONE) {\r\n");
      out.write("                if (xhr.status == 200 || xhr.status == 201) {\r\n");
      out.write("                    alert('Payment successful! ' + xhr.responseText);\r\n");
      out.write("                    let text = xhr.responseText;\r\n");
      out.write("                    const myArray = text.split(\" \");\r\n");
      out.write("                    if(myArray[1]==\"empty\"){\r\n");
      out.write("                        alert(\"show invoice 1\");\r\n");
      out.write("                    }else{\r\n");
      out.write("                        alert(\"show invoice 2\");\r\n");
      out.write("                    }\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert('Payment failed. ' + xhr.responseText);\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("        xhr.send(JSON.stringify(tokenObject));\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
