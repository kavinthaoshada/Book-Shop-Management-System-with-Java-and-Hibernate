/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-10-09 04:36:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import java.time.format.DateTimeFormatter;
import org.hibernate.SessionFactory;
import com.calm.webdb.util.HibernateUtil;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import java.sql.Date;
import java.time.*;
import com.calm.webdb.entity.*;

public final class adminPanel_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.time");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("com.calm.webdb.entity");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.hibernate.Transaction");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("org.hibernate.SessionFactory");
    _jspx_imports_classes.add("org.hibernate.query.Query");
    _jspx_imports_classes.add("com.calm.webdb.util.HibernateUtil");
    _jspx_imports_classes.add("org.hibernate.Session");
    _jspx_imports_classes.add("java.sql.Date");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n");
      out.write("\r\n");
      out.write("    <title>Infinity | Admin Panel</title>\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"icon\" href=\"assets/resources/infinity_logo2.svg\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"assets/css/bootstrap.css\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"assets/css/clock.css\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"assets/css/style.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body class=\"bg-body\">\r\n");
      out.write("\r\n");
      out.write("<div class=\"container.fluid\">\r\n");
      out.write("    <div class=\"row\">\r\n");
      out.write("\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "dashBord.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <div class=\"col-12 col-lg-9\">\r\n");
      out.write("            <div class=\"row\">\r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-12 text-black-50 fw-bold mb-3 mt-2\">\r\n");
      out.write("                    <h2 class=\"fw-bold\">Dashboard</h2>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-12\">\r\n");
      out.write("                    <hr/>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-12 col-lg-6 shadow-sm\" style=\"background-color: rgb(203, 231, 227);\">\r\n");
      out.write("                    <div class=\"row g-1\">\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 col-lg-6 px-1 shadow\">\r\n");
      out.write("                            <div class=\"row g-1\">\r\n");
      out.write("                                <div class=\"col-12 text-black text-center rounded my-2\" style=\"height: 100px; background-color: rgb(247, 244, 220);\">\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-4 fw-bold\">Daily erning</span>\r\n");
      out.write("                                    <br/>\r\n");
      out.write("\r\n");
      out.write("                                    ");

                                        LocalDate today = LocalDate.now();
                                        String formattedToday = today.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                                        String thisMonth = today.format(DateTimeFormatter.ofPattern("MM"));
                                        String thisYear = today.format(DateTimeFormatter.ofPattern("yyyy"));
//                        $today = date("Y-m-d");
//                        $this_month = date("m");
//                        $this_year = date("Y");

                        double a = 0;
                        double b = 0;
                        int c = 0;
                        int d = 0;
                        int e = 0;

                        SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
                        Session session1 = sessionFactory.openSession();
                        Transaction transaction = session1.beginTransaction();
                        Query<InvoiceItemEntity> query = session1.createQuery("SELECT ii FROM InvoiceItemEntity ii " +
                                "INNER JOIN ii.invoiceByInvoiceId i " +
                                "INNER JOIN ii.stockByStockId s", InvoiceItemEntity.class);
                        List<InvoiceItemEntity> invoiceItems = query.getResultList();
                        for(InvoiceItemEntity invoiceItem : invoiceItems){
                            Query<InvoicePaymentEntity> query1 = session1.createQuery("SELECT ip FROM InvoicePaymentEntity ip " +
                                    "INNER JOIN ip.invoiceByInvoiceId i WHERE i.id= :invoiceId", InvoicePaymentEntity.class)
                                    .setParameter("invoiceId", invoiceItem.getInvoiceByInvoiceId().getId());
                            List<InvoicePaymentEntity> invoicePayments = query1.getResultList();
                            for(InvoicePaymentEntity invoicePayment : invoicePayments){

                                    e = e + invoiceItem.getQty();

                                    Date f = invoiceItem.getInvoiceByInvoiceId().getDate();
                                    String pdate = String.valueOf(f);

                                    double tot = invoiceItem.getStockByStockId().getSellingPrice() * invoiceItem.getQty();

                                    if(pdate == formattedToday){
                                    a = a + tot;
                                    c = c + invoiceItem.getQty();
                                    }

                                    String[] splitResult = pdate.split("-");
                                    String pyear = splitResult[0];
                                    String pmonth = splitResult[1];
//                                    $split_result = explode("-",$pdate);
//                                    $pyear = $split_result[0];
//                                    $pmonth = $split_result[1];

                                    if(pyear == thisYear){
                                    if(pmonth == thisMonth){
                                    b = b + tot;
                                    d = d + invoiceItem.getQty();
                                    }
                                    }

                                    }
                                    }
                                    
      out.write("\r\n");
      out.write("\r\n");
      out.write("                                    <span class=\"fs-5\">Rs.");
      out.print( a+"" );
      out.write("0</span>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 col-lg-6 px-1 shadow\">\r\n");
      out.write("                            <div class=\"row g-1\">\r\n");
      out.write("                                <div class=\"col-12 text-black text-center rounded my-2\" style=\"height: 100px; background-color: rgb(247, 244, 220);\">\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-4 fw-bold\">Monthly erning</span>\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-5\">Rs.");
      out.print( b+"" );
      out.write("0</span>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 col-lg-6 px-1 shadow\">\r\n");
      out.write("                            <div class=\"row g-1\">\r\n");
      out.write("                                <div class=\"col-12 text-black text-center rounded my-2\" style=\"height: 100px; background-color: rgb(247, 244, 220);\">\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-4 fw-bold\">Today Sellings</span>\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-5\">");
      out.print( c+"" );
      out.write(" Item</span>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 col-lg-6 px-1 shadow\">\r\n");
      out.write("                            <div class=\"row g-1\">\r\n");
      out.write("                                <div class=\"col-12 text-black text-center rounded my-2\" style=\"height: 100px; background-color: rgb(247, 244, 220);\">\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-4 fw-bold\">Monthly Sellings</span>\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-5\">");
      out.print( d+"" );
      out.write(" Item</span>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 col-lg-6 px-1 shadow\">\r\n");
      out.write("                            <div class=\"row g-1\">\r\n");
      out.write("                                <div class=\"col-12 text-black text-center rounded my-2\" style=\"height: 100px; background-color: rgb(247, 244, 220);\">\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-4 fw-bold\">Total Sellings</span>\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-5\">");
      out.print( e+"" );
      out.write(" Item</span>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 col-lg-6 px-1 shadow\">\r\n");
      out.write("                            <div class=\"row g-1\">\r\n");
      out.write("                                <div class=\"col-12 text-black text-center rounded my-2\" style=\"height: 100px; background-color: rgb(247, 244, 220);\">\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    <span class=\"fs-4 fw-bold\">Total Engagements</span>\r\n");
      out.write("                                    <br/>\r\n");
      out.write("                                    ");

                                        Query<UsersEntity> query2 = session1.createQuery("FROM UsersEntity u", UsersEntity.class);
                                        List<UsersEntity> users = query2.getResultList();
                                        int userCount = 0;
                                        for(UsersEntity user : users){
                                            userCount++;
                                        }
                                    
      out.write("\r\n");
      out.write("                                    <span class=\"fs-5\">");
      out.print( userCount+"" );
      out.write(" Members</span>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <!-- <div class=\"col-12\">\r\n");
      out.write("                    <hr/>\r\n");
      out.write("                </div> -->\r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-5 mx-5 shadow\" style=\"background-color: rgb(212, 202, 202);\">\r\n");
      out.write("                    <div class=\"row\">\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 text-center mt-3 mb-3\">\r\n");
      out.write("                            <label class=\"form-label fs-4 fw-bold text-black\">Total Active Time</label>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        ");

                            LocalDateTime startDate = LocalDateTime.parse("2022-07-01T00:00:00");
                            ZonedDateTime endDate = ZonedDateTime.now(ZoneId.of("Asia/Colombo"));
                            Duration duration = Duration.between(startDate, endDate);

                            long years = duration.toDays() / 365;
                            long months = (duration.toDays() % 365) / 30;
                            long days = duration.toDays() % 30;
                            long hours = duration.toHours() % 24;
                            long minutes = duration.toMinutes() % 60;
                            long seconds = duration.getSeconds() % 60;

                        
      out.write("\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 col-lg-10 text-end mt-3 mb-3\">\r\n");
      out.write("                            <label class=\"form-label fs-4 fw-bold text-black\">\r\n");
      out.write("                                ");
      out.print( years + " Years " + months + " Months " +
                                        days + " Days " + hours + " Hours " +
                                        minutes + " Minutes " + seconds + " Seconds " );
      out.write("\r\n");
      out.write("                            </label>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"mx-5\" style=\"width: 150px; height: 100px;\">\r\n");
      out.write("                            <div class=\"clock\">\r\n");
      out.write("                                <div class=\"clock-hand\">\r\n");
      out.write("                                    <div class=\"hand hour\"></div>\r\n");
      out.write("                                    <div class=\"hand minute\"></div>\r\n");
      out.write("                                    <div class=\"hand second\"></div>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"offset-1 col-10 col-lg-10 mt-3 mb-3 rounded shadow\" style=\"background-color: rgb(202, 234, 243);\">\r\n");
      out.write("                    <div class=\"row g-1\">\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 text-center\">\r\n");
      out.write("                            <label class=\"form-label fs-4 fw-bold\">Mostly Sold Item</label>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        ");

//                            COUNT(b.id) AS value_occurence
                         Query<InvoiceItemEntity> query3 = session1.createQuery("SELECT ii " +
                                 "FROM InvoiceItemEntity ii " +
                                 "JOIN ii.invoiceByInvoiceId i " +
                                 "JOIN ii.stockByStockId s " +
                                 "JOIN s.bookByBookId b " +
                                 "WHERE DATE_FORMAT(i.date, '%Y-%m-%d') LIKE :today " +
                                 "GROUP BY b.id " +
                                 "ORDER BY COUNT(b.id) DESC", InvoiceItemEntity.class)
                                 .setParameter("today", formattedToday);
                         List<InvoiceItemEntity> iIs = query3.getResultList();
                         for(InvoiceItemEntity iI : iIs){
                             Query<InvoicePaymentEntity> query4 = session1.createQuery("SELECT ip FROM InvoicePaymentEntity ip " +
                                             "INNER JOIN ip.invoiceByInvoiceId i WHERE i.id= :invoiceId", InvoicePaymentEntity.class)
                                     .setParameter("invoiceId", iI.getInvoiceByInvoiceId().getId());
                             List<InvoicePaymentEntity> iPs = query4.getResultList();
                             for(InvoicePaymentEntity iP : iPs){


                        Query<ImagesEntity> query5 = session1.createQuery("FROM ImagesEntity i WHERE i.productId= :bookId", ImagesEntity.class)
                             .setParameter("bookId", iI.getStockByStockId().getBookByBookId().getId());
                        List<ImagesEntity> imgs = query5.getResultList();
                        String code = "";
                        for(ImagesEntity img : imgs){
                            code = img.getCode();
                        }

                        Query<BookEntity> query6 = session1.createQuery("FROM BookEntity b WHERE b.id= :bookId", BookEntity.class)
                              .setParameter("bookId", iI.getStockByStockId().getBookByBookId().getId());
                        List<BookEntity> books = query6.getResultList();
                                 transaction.commit();
                                 session1.close();
                        String title = "";
                        for(BookEntity book : books){
                            title = book.getTitle();
                        }

                        
      out.write("\r\n");
      out.write("                        <div class=\"col-6 text-center\">\r\n");
      out.write("                            <img src=\"");
      out.print( code );
      out.write("\" class=\"img-fluid rounded-top\" style=\"height: 250px;\"/>\r\n");
      out.write("                            <!-- <hr/> -->\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-6 text-center\">\r\n");
      out.write("                            <span class=\"fs-4\">");
      out.print( title );
      out.write("</span>\r\n");
      out.write("                            <br/>\r\n");
      out.write("                            <!-- <span class=\"fs-6\"><?php\r\n");
      out.write("                            //  echo $qtytotal[\"total\"];\r\n");
      out.write("                             ?>Items</span>\r\n");
      out.write("                            <br/>\r\n");
      out.write("                            <span class=\"fs-6\">Rs. <?php\r\n");
      out.write("                            // echo $pdetails[\"price\"];\r\n");
      out.write("                            ?>.00</span>\r\n");
      out.write("                            <br/> -->\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"col-12 mb-2\">\r\n");
      out.write("                            <div class=\"first_place\"></div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                ");

                    }
                    }

                
      out.write("\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "modals.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"assets/js/script.js\"></script>\r\n");
      out.write("<script src=\"assets/js/bootstrap.bundle.js\"></script>\r\n");
      out.write("<script src=\"assets/js/bootstrap.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
